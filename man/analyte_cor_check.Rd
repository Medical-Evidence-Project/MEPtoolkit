% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyte_cor_check.R
\name{analyte_cor_check}
\alias{analyte_cor_check}
\title{Flag and quantify preâ€“post correlation vs analyte ceilings}
\usage{
analyte_cor_check(
  data = NULL,
  analyte,
  m1,
  s1,
  m2,
  s2,
  n,
  r_obs = NULL,
  sc = NULL,
  mc = NULL,
  t = NULL,
  p = NULL,
  k = 1,
  use = c("pre", "post", "average"),
  append = FALSE,
  output = FALSE
)
}
\arguments{
\item{data}{Optional data.frame with columns; you may pass bare/quoted column names.}

\item{analyte, m1, s1, m2, s2}{Bare/quoted names in `data` or vectors. For rounding-aware
ceilings, these must be character strings (e.g., `m1 = "142.23"`).}

\item{n}{Column name or numeric vector. Paired sample size (exact).}

\item{r_obs}{Optional reported correlation as character (e.g., `".980"`). Only used
as a fallback when `prepost_r()` cannot be computed; its lower rounding bound
becomes the numeric `r_obs` used here.}

\item{sc, mc, t, p}{Optional inputs forwarded to `prepost_r()` (priority `sc > t > p`);
may be columns in `data`. If numeric, coerced to character.}

\item{k}{Integer (>=1). Replicates averaged (passed to `analyte_max_cor()`).}

\item{use}{Which study CVT to use in the ceiling calculation: `"pre"`, `"post"`,
or `"average"`.}

\item{append}{Logical. If TRUE and `data` is supplied, return `data`
with new columns appended; else return only the new columns (and include
`analyte` and `n_used` so printing works).}

\item{output}{Logical. If \code{TRUE}, also outputs a summary of results in the console.}
}
\value{
A data.frame containing (or appending):
\itemize{
  \item `n_used` (the n actually used)
  \item `r_max_analytic_expected`, `r_max_total_expected`
  \item `r_obs` (numeric; lower rounding-bound of the observed correlation)
  \item `exceeds_max_analytic`, `exceeds_max_total`
  \item `prob_analytic`, `prob_total` (one-tailed Fisher-z at `r_obs`)
}
}
\description{
For each row/case this function:
(1) computes rounding-aware ceilings with `analyte_max_cor()` (analytic-only and
    analytic+biological);
(2) obtains the paired correlation via `prepost_r()` and uses its LOWER rounding
    bound as the observed correlation `r_obs` used for flagging and p-values
    (most generous to the study);
    if `prepost_r()` cannot be computed and a reported correlation `r_obs`
    (character) is supplied, its LOWER rounding bound is used;
(3) computes one-tailed probabilities that a correlation >= `r_obs` would be seen
    if the true correlation equaled each ceiling (Fisher z, n > 3).
}
\details{
Rounding-aware inputs: `m1, s1, m2, s2` must be character strings (e.g., "64.3")
so decimals encode rounding, consistent with `analyte_max_cor()`.
}
\examples{
# --- Example 1: data.frame input; r derived via paired t (rounding-aware) ---
df <- data.frame(
  analyte = c("Sodium","Total Cholesterol"),
  m1 = c("140.2","6.60"),
  s1 = c("2.10","0.90"),
  m2 = c("139.8","6.40"),
  s2 = c("2.05","0.90"),
  t  = c("3.00","2.40"),
  n  = c(60, 45),
  stringsAsFactors = FALSE
)
out1 <- analyte_cor_check(
  data = df,
  analyte = analyte, m1 = m1, s1 = s1, m2 = m2, s2 = s2,
  n = n, t = t,
  k = 5, use = "pre", append = TRUE
)
print(out1, max_rows = 10)

# --- Example 2: scalar inputs (no data.frame), r derived via t ---
out2 <- analyte_cor_check(
  analyte = "Sodium",
  m1 = "140.2", s1 = "2.10",
  m2 = "139.8", s2 = "2.05",
  n = 60, t = "2.50",
  k = 1, use = "pre", append = FALSE
)
print(out2)

# --- Example 3: reported r only (fallback).
# If prepost_r() cannot be computed from the provided stats, the LOWER
# rounding bound of r_obs (character) is used for flagging and p-values.
out3 <- analyte_cor_check(
  analyte = "Total Cholesterol",
  m1 = "6.60", s1 = "0.90",
  m2 = "6.40", s2 = "0.90",
  n = 45,
  r_obs = ".980",              # character; uses its lower rounding bound
  k = 1, use = "pre", append = FALSE
)
print(out3)

# --- Example 4: r derived via two-sided p (when t/sc not available) ---
out4 <- analyte_cor_check(
  analyte = "Glucose",
  m1 = "92.1",  s1 = "9.8",
  m2 = "88.4",  s2 = "9.1",
  n = 52,
  p = "0.012",                    # two-sided p as character
  k = 1, use = "pre", append = FALSE
)
print(out4)



}
